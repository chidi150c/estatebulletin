// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

/*
Package chatting is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	MessageFromClient
	MessageFromServer
*/
package chatting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Sentiment int32

const (
	Sentiment_HAPPY       Sentiment = 0
	Sentiment_INDEFFERENT Sentiment = 1
	Sentiment_ANGRY       Sentiment = 2
)

var Sentiment_name = map[int32]string{
	0: "HAPPY",
	1: "INDEFFERENT",
	2: "ANGRY",
}
var Sentiment_value = map[string]int32{
	"HAPPY":       0,
	"INDEFFERENT": 1,
	"ANGRY":       2,
}

func (x Sentiment) String() string {
	return proto.EnumName(Sentiment_name, int32(x))
}
func (Sentiment) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageFromClient struct {
	Name     string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Message  string            `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
	Email    string            `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	MoreInfo map[string]string `protobuf:"bytes,4,rep,name=MoreInfo" json:"MoreInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Feel     Sentiment         `protobuf:"varint,5,opt,name=Feel,enum=chatting.Sentiment" json:"Feel,omitempty"`
}

func (m *MessageFromClient) Reset()                    { *m = MessageFromClient{} }
func (m *MessageFromClient) String() string            { return proto.CompactTextString(m) }
func (*MessageFromClient) ProtoMessage()               {}
func (*MessageFromClient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MessageFromClient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MessageFromClient) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MessageFromClient) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *MessageFromClient) GetMoreInfo() map[string]string {
	if m != nil {
		return m.MoreInfo
	}
	return nil
}

func (m *MessageFromClient) GetFeel() Sentiment {
	if m != nil {
		return m.Feel
	}
	return Sentiment_HAPPY
}

type MessageFromServer struct {
	Name    string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *MessageFromServer) Reset()                    { *m = MessageFromServer{} }
func (m *MessageFromServer) String() string            { return proto.CompactTextString(m) }
func (*MessageFromServer) ProtoMessage()               {}
func (*MessageFromServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageFromServer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MessageFromServer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*MessageFromClient)(nil), "chatting.MessageFromClient")
	proto.RegisterType((*MessageFromServer)(nil), "chatting.MessageFromServer")
	proto.RegisterEnum("chatting.Sentiment", Sentiment_name, Sentiment_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[0], c.cc, "/chatting.ChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatClient{stream}
	return x, nil
}

type ChatService_ChatClient interface {
	Send(*MessageFromClient) error
	Recv() (*MessageFromServer, error)
	grpc.ClientStream
}

type chatServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatClient) Send(m *MessageFromClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatClient) Recv() (*MessageFromServer, error) {
	m := new(MessageFromServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	Chat(ChatService_ChatServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&chatServiceChatServer{stream})
}

type ChatService_ChatServer interface {
	Send(*MessageFromServer) error
	Recv() (*MessageFromClient, error)
	grpc.ServerStream
}

type chatServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatServer) Send(m *MessageFromServer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatServer) Recv() (*MessageFromClient, error) {
	m := new(MessageFromClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatting.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x65, 0x4b, 0x51, 0x18, 0xa2, 0xd6, 0xd1, 0x43, 0x83, 0x17, 0xc2, 0xc5, 0xea, 0xa1, 0x31,
	0xf5, 0x62, 0xf4, 0x44, 0x70, 0xab, 0x1c, 0x68, 0x48, 0xd1, 0x03, 0xc7, 0x95, 0x8c, 0xd0, 0xd8,
	0x6e, 0xcd, 0xb2, 0x92, 0x70, 0xf7, 0xc3, 0xcd, 0xb6, 0x14, 0x43, 0x34, 0x26, 0xde, 0xe6, 0xcd,
	0xbc, 0x9d, 0xf7, 0xe6, 0x2d, 0xc0, 0x6c, 0x21, 0xb4, 0xff, 0xae, 0x72, 0x9d, 0x63, 0xd3, 0xd4,
	0x3a, 0x91, 0xf3, 0xde, 0xa7, 0x05, 0xc7, 0x23, 0x5a, 0x2e, 0xc5, 0x9c, 0x42, 0x95, 0x67, 0x83,
	0x34, 0x21, 0xa9, 0x11, 0xc1, 0x8e, 0x44, 0x46, 0x2e, 0xeb, 0x32, 0xaf, 0x15, 0x17, 0x35, 0xba,
	0xb0, 0xbf, 0x21, 0xba, 0x56, 0xd1, 0xae, 0x20, 0x9e, 0x42, 0x83, 0x67, 0x22, 0x49, 0xdd, 0x7a,
	0xd1, 0x2f, 0x01, 0x72, 0x68, 0x8e, 0x72, 0x45, 0x43, 0xf9, 0x9a, 0xbb, 0x76, 0xb7, 0xee, 0xb5,
	0x83, 0x0b, 0xbf, 0x92, 0xf5, 0x7f, 0x48, 0xfa, 0x15, 0x97, 0x4b, 0xad, 0xd6, 0xf1, 0xf6, 0x29,
	0x9e, 0x83, 0x1d, 0x12, 0xa5, 0x6e, 0xa3, 0xcb, 0xbc, 0xc3, 0xe0, 0xe4, 0x7b, 0xc5, 0x84, 0xa4,
	0x4e, 0x32, 0x92, 0x3a, 0x2e, 0x08, 0x9d, 0x3b, 0x38, 0xd8, 0xd9, 0x81, 0x0e, 0xd4, 0xdf, 0x68,
	0xbd, 0xb9, 0xc1, 0x94, 0xc6, 0xe8, 0x4a, 0xa4, 0x1f, 0xd5, 0x01, 0x25, 0xb8, 0xb5, 0x6e, 0x58,
	0xaf, 0xbf, 0x93, 0xc2, 0x84, 0xd4, 0x8a, 0xd4, 0xff, 0x52, 0xb8, 0x0c, 0xa0, 0xb5, 0xb5, 0x84,
	0x2d, 0x68, 0x3c, 0xf6, 0xc7, 0xe3, 0xa9, 0x53, 0xc3, 0x23, 0x68, 0x0f, 0xa3, 0x7b, 0x1e, 0x86,
	0x3c, 0xe6, 0xd1, 0x93, 0xc3, 0xcc, 0xac, 0x1f, 0x3d, 0xc4, 0x53, 0xc7, 0x0a, 0x9e, 0xa1, 0x3d,
	0x58, 0x08, 0x6d, 0xf4, 0x92, 0x19, 0x61, 0x08, 0xb6, 0x81, 0x78, 0xf6, 0x47, 0x50, 0x9d, 0xdf,
	0x87, 0xa5, 0xe5, 0x5e, 0xcd, 0x63, 0x57, 0xec, 0x65, 0xaf, 0xf8, 0xe5, 0xeb, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xd6, 0xbb, 0xbb, 0xe8, 0xf3, 0x01, 0x00, 0x00,
}
